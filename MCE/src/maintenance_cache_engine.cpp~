#include "maintenance_cache_engine.h"

#include <iostream>
#include <vector>

#include <boost/scoped_ptr.hpp>
#include <boost/foreach.hpp>

#include <cppconn/prepared_statement.h>
#include <cppconn/resultset.h>

#include <Models/AdInfo.h>
#include <Models/ZoneInfo.h>
#include <core/Space.h>
#include <core/Table.h>

#include "sql.h.inc"

#include "mysql_context.h"

NS_USING_DRAGON

CacheProcess::CacheProcess()
{

}

CacheProcess::~CacheProcess()
{

}

void CacheProcess::SetPath()
{
	path_ = MCE_APP_PATH;
}

void CacheTask::Run(dragon::Cycle &c)
{
	std::cout << "Task Run at " << c.path << std::endl;

	std::vector<int> zoneids;
	MySQLContext sqlCtx;
	sql::Connection *conn = sqlCtx.Connect("127.0.0.1", "root", "", "dap");

	sql::PreparedStatement *stmt = conn->prepareStatement(strQueryAllZone);
	sql::ResultSet *rs = stmt->executeQuery();
	while (rs->next()) {
		std::cout << "zone_id:" << rs->getString("zone_id") << std::endl;
		zoneids.push_back(rs->getInt("zone_id"));
	}
	delete rs;
	delete stmt;

	NamedSemiSpace space("DE_CACHE_DATA", 1024 * 1024);
	space.Create();
	OffsetTable table(1000, space);

	BOOST_FOREACH(int zoneid, zoneids)
	{
		sql::PreparedStatement *stmt = conn->prepareStatement(strQueryZoneInfo);
		stmt->setInt(1, zoneid);
		sql::ResultSet *rs = stmt->executeQuery();
		ZoneInfo zoneInfo;
		zoneInfo.Stuff(rs);
		std::cout << "zone name:" << zoneInfo.name << std::endl;

		table.Put(zoneid, space.GetPos());
		zoneInfo.Dump(space);
		delete rs;
		delete stmt;
	}

	/*AdInfo ad;
	ad.id = 1;
	ad.name = "ajs";

	table.Put(ad.id, space.GetPos());
	ad.Dump(space);*/

	space.Close();
}

int main(int argc, char *argv[]) {
	CacheTask t;
	CacheProcess p;
	p.Init();
	p.PushTask(&t);
	p.Run();
	p.Dispose();
	return 0;
}
